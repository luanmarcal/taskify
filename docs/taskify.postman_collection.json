{
	"info": {
		"_postman_id": "0e96b79e-36c2-475a-bd81-ab2eb2f92da6",
		"name": "taskify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43696728"
	},
	"item": [
		{
			"name": "default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Response time is less than 200ms\", function () {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}",
					"host": [
						"{{base-url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "all-tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields - id, title, description, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.data.forEach(function(task) {\r",
							"        pm.expect(task).to.have.property('id');\r",
							"        pm.expect(task).to.have.property('title');\r",
							"        pm.expect(task).to.have.property('description');\r",
							"        pm.expect(task).to.have.property('status');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v1/tasks",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "all-tasks-done",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields - id, title, description, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.data.forEach(function(task) {\r",
							"        pm.expect(task).to.have.property('id');\r",
							"        pm.expect(task).to.have.property('title');\r",
							"        pm.expect(task).to.have.property('description');\r",
							"        pm.expect(task).to.have.property('status');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status of all tasks is 'done'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.data.forEach(function(task) {\r",
							"        pm.expect(task.status).to.equal('done');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v1/tasks?status=done",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks"
					],
					"query": [
						{
							"key": "status",
							"value": "done"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "all-tasks-pending",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields - id, title, description, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.data.forEach(function(task) {\r",
							"        pm.expect(task).to.have.property('id');\r",
							"        pm.expect(task).to.have.property('title');\r",
							"        pm.expect(task).to.have.property('description');\r",
							"        pm.expect(task).to.have.property('status');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status of all tasks is 'pending'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.data.forEach(function(task) {\r",
							"        pm.expect(task.status).to.equal('pending');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v1/tasks?status=pending",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks"
					],
					"query": [
						{
							"key": "status",
							"value": "pending"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create-task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json().data;\r",
							"pm.environment.set(\"id\", responseJson.id);\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object schema is valid\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.have.property('id');\r",
							"  pm.expect(responseData.data).to.have.property('title');\r",
							"  pm.expect(responseData.data).to.have.property('description');\r",
							"  pm.expect(responseData.data).to.have.property('status');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"teste2\",\r\n    \"description\": \"teste2 desc\",\r\n    \"status\": \"pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/v1/tasks",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "task-by-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, title, description, and status\", function () {\r",
							"    const responseData = pm.response.json().data;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.title).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data.id).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title and description should be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"    pm.expect(responseData.data.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v1/tasks/{{id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object schema is valid\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
							"  pm.expect(responseData.data.id).to.be.a('number');\r",
							"  pm.expect(responseData.data.title).to.be.a('string');\r",
							"  pm.expect(responseData.data.description).to.be.a('string');\r",
							"  pm.expect(responseData.data.status).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"teste5555\",\r\n    \"description\": \"testeeeee\",\r\n    \"status\": \"pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/v1/tasks/{{id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - message and id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response schema matches the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v1/tasks/{{id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base-url",
			"value": " http://localhost:8000/api",
			"type": "string"
		}
	]
}